# Getting Started Instructions for Modern Rust Desktop Apps

## A Step-by-Step Guide to Building Modern Rust Desktop Apps

This guide will walk you through the entire process of setting up a new project, integrating the necessary tools, and creating a simple application that demonstrates the power of this stack.

### Prerequisites

Before you begin, ensure you have the following installed on your system.

- **Rust**: If you don't have Rust installed, you can get it from the official website: https://www.rust-lang.org/tools/install
- **Node.js**: You'll need Node.js to manage the React frontend. You can download it from https://nodejs.org/.
- **Tauri Prerequisites**: Tauri has some system-specific dependencies. Follow the official guide to set them up for your operating system: https://tauri.app/v1/guides/getting-started/prerequisites

### Step 1: Create a New Tauri Project with React

First, let's create a new Tauri application using the React template.

Open your terminal and run the following command. This uses the create-tauri-app package to launch an interactive setup wizard for your new project.

```bash
npm create tauri-app@latest
```

Follow the prompts:
- What is your app name? → Enter a name for your project (e.g., my-sleek-app).
- What should be your window title? → My Sleek App
- Choose your UI recipe → create-vite
- Add tauri-plugin-api? → yes
- Which framework would you like to use? → React
- Would you like to use TypeScript? → Yes (This is recommended for modern development and required by shadcn/ui).

Navigate into your new project directory:
```bash
cd my-sleek-app
```

Install the dependencies:
```bash
npm install
```

### Step 2: Integrate Tailwind CSS

shadcn/ui uses Tailwind CSS for styling, so we need to add it to our project.

Install Tailwind CSS and its peer dependencies:
```bash
npm install -D tailwindcss postcss autoprefixer
```

Initialize Tailwind CSS:
```bash
npx tailwindcss init -p
```

This will create two new files in your project root: `tailwind.config.js` and `postcss.config.js`.

Configure your `tailwind.config.js` file. Open it and replace its content with the following to set up content paths and prepare for shadcn/ui:

```javascript
/** @type {import('tailwindcss').Config} */
export default {
  darkMode: ["class"],
  content: [
    './pages/**/*.{ts,tsx}',
    './components/**/*.{ts,tsx}',
    './app/**/*.{ts,tsx}',
    './src/**/*.{ts,tsx}',
    './index.html',
  ],
  prefix: "",
  theme: {
    container: {
      center: true,
      padding: "2rem",
      screens: {
        "2xl": "1400px",
      },
    },
    extend: {
      keyframes: {
        "accordion-down": {
          from: { height: "0" },
          to: { height: "var(--radix-accordion-content-height)" },
        },
        "accordion-up": {
          from: { height: "var(--radix-accordion-content-height)" },
          to: { height: "0" },
        },
      },
      animation: {
        "accordion-down": "accordion-down 0.2s ease-out",
        "accordion-up": "accordion-up 0.2s ease-out",
      },
    },
  },
  plugins: [require("tailwindcss-animate")],
}
```

Add the Tailwind directives to your CSS. Open `src/styles.css` and replace its content with:

```css
@tailwind base;
@tailwind components;
@tailwind utilities;
```

### Step 3: Initialize shadcn/ui

Now, let's add shadcn/ui to the project.

Run the shadcn/ui init command:
```bash
npx shadcn-ui@latest init
```

You will be asked a few questions:
- Would you like to use TypeScript (recommended)? → yes
- Which style would you like to use? → Default (You can choose New York if you prefer).
- Which color would you like to use as base color? → Slate
- Where is your global CSS file? → src/styles.css
- Do you want to use CSS variables for colors? → yes
- Where is your tailwind.config.js located? → tailwind.config.js
- Configure the import alias for components: → @/components
- Configure the import alias for utils: → @/lib/utils
- Are you using React Server Components? → no
- Write configuration to components.json? → yes

### Step 4: Add a shadcn/ui Component

Let's add a Button component to our app to see it in action.

Add the button component:
```bash
npx shadcn-ui@latest add button
```

This will create a new file at `src/components/ui/button.tsx`.

Use the button in your app. Open `src/App.tsx` and replace its content with the following:

```tsx
import { useState } from 'react'
import { invoke } from '@tauri-apps/api/tauri'
import { Button } from "@/components/ui/button"

function App() {
  const [greetMsg, setGreetMsg] = useState("");
  const [name, setName] = useState("");

  async function greet() {
    // Learn more about Tauri commands at https://tauri.app/v1/guides/features/command
    setGreetMsg(await invoke("greet", { name }));
  }

  return (
    <div className="container mx-auto p-8 flex flex-col items-center justify-center min-h-screen bg-background text-foreground">
      <div className="text-center">
        <h1 className="text-4xl font-bold mb-4">Welcome to Tauri!</h1>
        <p className="text-lg text-muted-foreground mb-8">
          Click on the logo to learn more about the framework.
        </p>
      </div>

      <div className="flex flex-col gap-4 w-full max-w-xs">
         <input
          id="greet-input"
          className="flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2"
          onChange={(e) => setName(e.currentTarget.value)}
          placeholder="Enter a name..."
        />
        <Button onClick={greet}>Greet</Button>
      </div>
      <p className="mt-4">{greetMsg}</p>
    </div>
  );
}

export default App;
```

### Step 5: Run Your Application

Now you're ready to see your sleek new application in action.

Run the development server:
```bash
npm run tauri dev
```

Your application window should appear, featuring a clean input field and a stylish button from shadcn/ui.

### Next Steps

You now have a solid foundation for building your application. From here, you can:

- **Add more shadcn/ui components**: Explore the shadcn/ui documentation and add more components as needed using `npx shadcn-ui@latest add [component-name]`.
- **Build out your Rust backend**: Create more commands in `src-tauri/src/main.rs` to handle complex logic, file system operations, database interactions, and more.
- **Explore the Tauri API**: Dive into the Tauri documentation to learn about its rich API for interacting with the native operating system.

Happy coding!
